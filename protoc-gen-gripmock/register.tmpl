// Code generated by GripMock. DO NOT EDIT.
package main

import (
    "google.golang.org/grpc"
	"github.com/tokopedia/gripmock/stub"
)

{{ range $package, $alias := .Dependencies }}
import {{$alias}} "{{$package}}"
{{end}}

{{ range .Services }}
{{ template "services" . }}
{{ end }}

func register(s *grpc.Server) {
    {{ range .Services }}
    {{ template "register_services" . }}
    {{ end }}
}

{{ define "services" }}
type {{.Name}} struct{}

{{ template "methods" .}}
{{ end }}

{{ define "methods" }}
{{ range .Methods}}
    {{ if eq .MethodType "standard"}}
        {{ template "standard_method" .}}
    {{ else if eq .MethodType "server-stream"}}
        {{ template "server_stream_method" .}}
    {{ else if eq .MethodType "client-stream"}}
        {{ template "client_stream_method" .}}
    {{ else if eq .MethodType "bidirectional"}}
        {{ template "bidirectional_method" .}}
    {{ end }}
{{end}}
{{end}}

{{ define "standard_method" }}
func (s *{{.ServiceName}}) {{.Name}}(ctx context.Context, in *{{.Input}}) (*{{.Output}},error){
    out := &{{.Output}}{}
    headers, _ := metadata.FromIncomingContext(ctx)
    err := stub.FindStub(ctx, "{{.ServiceName}}", "{{.Name}}", headers, in, out)
    if err != nil {
        return nil, err
    }

    return out, err
}
{{ end }}

{{ define "server_stream_method" }}
func (s *{{.ServiceName}}) {{.Name}}(in *{{.Input}}, srv {{.SvcPackage}}{{.ServiceName}}_{{.Name}}Server) error {
    out := &{{.Output}}{}
    headers, _ := metadata.FromIncomingContext(srv.Context())
    err := stub.FindStub(srv.Context(), "{{.ServiceName}}", "{{.Name}}", headers, in, out)
    if err != nil {
        return err
    }
    return srv.Send(out)
}
{{ end }}

{{ define "client_stream_method"}}
func (s *{{.ServiceName}}) {{.Name}}(srv {{.SvcPackage}}{{.ServiceName}}_{{.Name}}Server) error {
    out := &{{.Output}}{}
    for {
        input,err := srv.Recv()
        if err == io.EOF {
            return srv.SendAndClose(out)
        }
        headers, _ := metadata.FromIncomingContext(srv.Context())
        err = stub.FindStub(srv.Context(), "{{.ServiceName}}","{{.Name}}", headers, input, out)
        if err != nil {
            return err
        }
    }
}
{{ end }}

{{ define "bidirectional_method"}}
func (s *{{.ServiceName}}) {{.Name}}(srv {{.SvcPackage}}{{.ServiceName}}_{{.Name}}Server) error {
    for {
        in, err := srv.Recv()
        if err == io.EOF {
            return nil
        }
        if err != nil {
            return err
        }

        headers, _ := metadata.FromIncomingContext(srv.Context())
        out := &{{.Output}}{}
        err = stub.FindStub(srv.Context(), "{{.ServiceName}}","{{.Name}}", headers, in, out)
        if err != nil {
            return err
        }

        if err := srv.Send(out); err != nil{
            return err
        }
    }
}
{{end}}


{{ define "register_services" }}
    {{.Package}}Register{{.Name}}Server(s, &{{.Name}}{})
{{ end }}
